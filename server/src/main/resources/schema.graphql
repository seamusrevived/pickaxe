type Query {
    "Users"
    users: [User]
    "Games with spreads and results"
    games(week: String): [Game]
    "Picks for users"
    userPicks(week: String): [UserPicks]
    "Totals for users this week"
    userTotals(week: String): [UserWeekTotal]
    "Game Weeks"
    weeks: [Week]
    "Current game week"
    currentWeek: Week
}

type User {
    name: String
}

type Game {
    name: String
    week: String
    result: String
    spread: Float
}

type UserPicks {
    user: User
    picks: [Pick]
}

type UserWeekTotal {
    user: User
    total: Int
}

type Pick {
    game: String
    pick: String
}

type Week {
    name: String
    weekType: String
    weekOrder: Int
    week: Int
}

type Mutation {
    updatePick(name: String, userPick: UpdatedPick): Boolean
}

input UpdatedPick {
    week: String
    game: String
    pick: String
}