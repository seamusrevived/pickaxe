import org.apache.tools.ant.taskdefs.condition.Os

def get_number_pickaxe_containers = { ->
    def out = new ByteArrayOutputStream()
    exec {
        commandLine "docker", "ps", "-f", 'name="pickaxe$"', "-qa"
        standardOutput = out
    }
    return out.toString().trim().split("\n").findAll({ x -> x.length() > 0 }).size()
}

task install(type: Exec) {
    commandLine getYarnCmdForOs(), 'install'
}

task docker_build(type: Exec) {
    dependsOn ':pickaxe-server:jar'
    dependsOn ':pickaxe-server:copy_dependencies'
    dependsOn ':client:build'
    workingDir '..'
    commandLine 'docker', 'build', '.', '-f', 'e2e/Dockerfile', '-t', 'pickaxe:e2e'
}

task docker_start(type: Exec) {
    dependsOn 'docker_build'
    dependsOn ':client:build'
    if (get_number_pickaxe_containers() > 0) {
        dependsOn 'docker_clean_pickaxe_container'
    }
    dependsOn 'auxilary_servers'
    commandLine 'docker', 'run', '-d', '-p', '8080:8080', '--net', "pickaxe_default", '--name', 'pickaxe', 'pickaxe:e2e'
}

task docker_stop(type: Exec) {
    commandLine 'docker', 'stop', 'pickaxe'
}

task docker_rm(type: Exec) {
    dependsOn 'docker_stop'
    commandLine 'docker', 'rm', 'pickaxe'
}

task docker_is_not_running(type: Exec) {
    commandLine 'docker', 'stop', 'pickaxe'
    ignoreExitValue true
}

task docker_clean_pickaxe_container(type: Exec) {
    dependsOn 'docker_is_not_running'
    commandLine 'docker', 'rm', 'pickaxe'
    ignoreExitValue true
}

task docker_build_full(type: Exec) {
    dependsOn ':pickaxe-server:copy_dependencies'
    workingDir '..'
    commandLine 'docker', 'build', '.', '-f', 'e2e/Dockerfile', '-t', 'pickaxe:full-build-e2e'
}

task docker_start_full(type: Exec) {
    dependsOn 'docker_build_full'
    dependsOn ':client:build'
    if (get_number_pickaxe_containers() > 0) {
        dependsOn 'docker_clean_pickaxe_container'
    }
    dependsOn 'auxilary_servers'
    commandLine 'docker', 'run', '-d', '-p', '8080:8080', '--name', 'pickaxe', 'pickaxe:full-build-e2e'
}

task auxilary_servers(type: Exec) {
    commandLine 'docker-compose', 'up', '-d'
}

task test(type: Exec) {
    dependsOn 'install'
    dependsOn 'docker_start'
    commandLine getYarnCmdForOs(), 'run', 'cypress', 'run'
    finalizedBy 'docker_rm'
}

task full_build_test(type: Exec) {
    dependsOn 'docker_start_full'
    commandLine getYarnCmdForOs(), 'run', 'cypress', 'run'
    finalizedBy 'docker_rm'
}

private static String getYarnCmdForOs() {
    String yarn = 'yarn'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        yarn = 'yarn.cmd'
    }
    yarn
}